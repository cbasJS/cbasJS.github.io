{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/SEO/index.js","webpack:///./src/components/Header/index.js","webpack:///./src/components/Emoji/index.js","webpack:///./src/components/Footer/index.js","webpack:///./src/layouts/MainLayout.js","webpack:///./src/hooks/useSiteMetadata.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_layouts_MainLayout__WEBPACK_IMPORTED_MODULE_1__","_components_SEO__WEBPACK_IMPORTED_MODULE_2__","NotFoundPage","a","createElement","title","m","module","exports","require","default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","React","createContext","ProdPageRenderer","_ref","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Header","siteTitle","react_default","className","style","header","wrapper","h1","gatsby_browser_entry","to","Emoji","props","role","aria-label","label","aria-hidden","symbol","Footer","styles","footer","h5","Date","getFullYear","components_Emoji","MainLayout","children","_3387484817","mainLayout","components_Header","main","components_Footer","currentPath"],"mappings":"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","file":"component---src-pages-404-js-52ee07f32b2d82984233.js","sourcesContent":["import React from \"react\"\n\nimport MainLayout from \"../layouts/MainLayout\"\nimport SEO from \"../components/SEO\"\n\nconst NotFoundPage = () => (\n  <MainLayout>\n    <SEO title=\"404: Not found\" />\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </MainLayout>\n)\n\nexport default NotFoundPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `es`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport style from \"./Header.module.css\"\n\nimport PropTypes from \"prop-types\"\n\nconst Header = ({ siteTitle }) => (\n  <header className={style.header}>\n    <div className={style.wrapper}>\n      <h1 className={style.h1}>\n        <Link className={style.a} to=\"/\">\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","import React from \"react\"\nconst Emoji = props => (\n  <span\n    role=\"img\"\n    aria-label={props.label ? props.label : \"\"}\n    aria-hidden={props.label ? \"false\" : \"true\"}\n  >\n    {props.symbol}\n  </span>\n)\nexport default Emoji\n","import React from \"react\"\nimport Emoji from \"../Emoji\"\nimport styles from \"./Footer.module.css\"\n\nconst Footer = () => {\n  return (\n    <footer className={styles.footer}>\n      <div className={styles.wrapper}>\n        <h5 className={styles.h5}>\n          © {new Date().getFullYear()}, Made with a lot of{\" \"}\n          <Emoji label=\"sheep\" symbol=\"💓\" />\n        </h5>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from \"react\"\n\n// site metadata\nimport { useSiteMetadata } from \"../hooks/useSiteMetadata\"\n\n// components\nimport Header from \"../components/Header\"\nimport Footer from \"../components/Footer\"\n\n// styles\nimport \"../styles/normalize.css\" // reset styles\nimport \"../styles/extend-rules.css\"\nimport style from \"./MainLayout.module.css\"\n\nimport PropTypes from \"prop-types\"\n\nconst MainLayout = ({ children }) => {\n  const { title } = useSiteMetadata()\n\n  return (\n    <div className={style.mainLayout}>\n      <Header siteTitle={title}></Header>\n      <main className={style.main}>\n        <div className={style.wrapper}>{children}</div>\n      </main>\n      <Footer />\n    </div>\n  )\n}\n\nMainLayout.defaultProps = {\n  currentPath: \"/\",\n}\n\nMainLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default MainLayout\n","import { useStaticQuery, graphql } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n  const { site } = useStaticQuery(\n    graphql`\n      query SiteMetaData {\n        site {\n          siteMetadata {\n            title\n            shortDescription\n            description\n            author\n            mail\n            pathPrefix\n          }\n        }\n      }\n    `\n  )\n  return site.siteMetadata\n}\n"],"sourceRoot":""}